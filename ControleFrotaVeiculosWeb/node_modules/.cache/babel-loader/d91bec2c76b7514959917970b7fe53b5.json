{"ast":null,"code":"var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\n(function () {\n  'use strict';\n\n  var collator;\n\n  try {\n    collator = typeof Intl !== \"undefined\" && typeof Intl.Collator !== \"undefined\" ? Intl.Collator(\"generic\", {\n      sensitivity: \"base\"\n    }) : null;\n  } catch (err) {\n    console.log(\"Collator could not be initialized and wouldn't be used\");\n  }\n\n  var prevRow = [],\n      str2Char = [];\n  var Levenshtein = {\n    get: function get(str1, str2, options) {\n      var useCollator = options && collator && options.useCollator;\n      var str1Len = str1.length,\n          str2Len = str2.length;\n      if (str1Len === 0) return str2Len;\n      if (str2Len === 0) return str1Len;\n      var curCol, nextCol, i, j, tmp;\n\n      for (i = 0; i < str2Len; ++i) {\n        prevRow[i] = i;\n        str2Char[i] = str2.charCodeAt(i);\n      }\n\n      prevRow[str2Len] = str2Len;\n      var strCmp;\n\n      if (useCollator) {\n        for (i = 0; i < str1Len; ++i) {\n          nextCol = i + 1;\n\n          for (j = 0; j < str2Len; ++j) {\n            curCol = nextCol;\n            strCmp = 0 === collator.compare(str1.charAt(i), String.fromCharCode(str2Char[j]));\n            nextCol = prevRow[j] + (strCmp ? 0 : 1);\n            tmp = curCol + 1;\n\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n\n            tmp = prevRow[j + 1] + 1;\n\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n\n            prevRow[j] = curCol;\n          }\n\n          prevRow[j] = nextCol;\n        }\n      } else {\n        for (i = 0; i < str1Len; ++i) {\n          nextCol = i + 1;\n\n          for (j = 0; j < str2Len; ++j) {\n            curCol = nextCol;\n            strCmp = str1.charCodeAt(i) === str2Char[j];\n            nextCol = prevRow[j] + (strCmp ? 0 : 1);\n            tmp = curCol + 1;\n\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n\n            tmp = prevRow[j + 1] + 1;\n\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n\n            prevRow[j] = curCol;\n          }\n\n          prevRow[j] = nextCol;\n        }\n      }\n\n      return nextCol;\n    }\n  };\n\n  if (typeof define !== \"undefined\" && define !== null && define.amd) {\n    define(function () {\n      return Levenshtein;\n    });\n  } else if (typeof module !== \"undefined\" && module !== null && typeof exports !== \"undefined\" && module.exports === exports) {\n      module.exports = Levenshtein;\n    } else if (typeof self !== \"undefined\" && typeof self.postMessage === 'function' && typeof self.importScripts === 'function') {\n        self.Levenshtein = Levenshtein;\n      } else if (typeof window !== \"undefined\" && window !== null) {\n          window.Levenshtein = Levenshtein;\n        }\n})();","map":null,"metadata":{},"sourceType":"script"}