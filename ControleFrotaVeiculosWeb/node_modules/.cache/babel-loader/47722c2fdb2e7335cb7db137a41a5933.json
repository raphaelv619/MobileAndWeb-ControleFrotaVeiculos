{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _applyLayout = _interopRequireDefault(require(\"../../modules/applyLayout\"));\n\nvar _applyNativeMethods = _interopRequireDefault(require(\"../../modules/applyNativeMethods\"));\n\nvar _ExecutionEnvironment = require(\"fbjs/lib/ExecutionEnvironment\");\n\nvar _react = require(\"react\");\n\nvar _ColorPropType = _interopRequireDefault(require(\"../ColorPropType\"));\n\nvar _createElement = _interopRequireDefault(require(\"../createElement\"));\n\nvar _findNodeHandle = _interopRequireDefault(require(\"../findNodeHandle\"));\n\nvar _StyleSheet = _interopRequireDefault(require(\"../StyleSheet\"));\n\nvar _StyleSheetPropType = _interopRequireDefault(require(\"../../modules/StyleSheetPropType\"));\n\nvar _TextInputStylePropTypes = _interopRequireDefault(require(\"./TextInputStylePropTypes\"));\n\nvar _TextInputState = _interopRequireDefault(require(\"../../modules/TextInputState\"));\n\nvar _ViewPropTypes = _interopRequireDefault(require(\"../ViewPropTypes\"));\n\nvar _propTypes = require(\"prop-types\");\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar isAndroid = _ExecutionEnvironment.canUseDOM && /Android/i.test(navigator && navigator.userAgent);\nvar emptyObject = {};\n\nvar normalizeEventHandler = function normalizeEventHandler(handler) {\n  return function (e) {\n    if (handler) {\n      e.nativeEvent.text = e.target.value;\n      return handler(e);\n    }\n  };\n};\n\nvar isSelectionStale = function isSelectionStale(node, selection) {\n  if (node && selection) {\n    var selectionEnd = node.selectionEnd,\n        selectionStart = node.selectionStart;\n    var start = selection.start,\n        end = selection.end;\n    return start !== selectionStart || end !== selectionEnd;\n  }\n\n  return false;\n};\n\nvar setSelection = function setSelection(node, selection) {\n  try {\n    if (isSelectionStale(node, selection)) {\n      var start = selection.start,\n          end = selection.end;\n\n      if (isAndroid) {\n        setTimeout(function () {\n          return node.setSelectionRange(start, end || start);\n        }, 10);\n      } else {\n        node.setSelectionRange(start, end || start);\n      }\n    }\n  } catch (e) {}\n};\n\nvar TextInput = function (_Component) {\n  _inheritsLoose(TextInput, _Component);\n\n  function TextInput() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _this._handleBlur = function (e) {\n      var onBlur = _this.props.onBlur;\n      _TextInputState.default._currentlyFocusedNode = null;\n\n      if (onBlur) {\n        onBlur(e);\n      }\n    };\n\n    _this._handleChange = function (e) {\n      var _this$props = _this.props,\n          onChange = _this$props.onChange,\n          onChangeText = _this$props.onChangeText;\n      var text = e.nativeEvent.text;\n\n      if (onChange) {\n        onChange(e);\n      }\n\n      if (onChangeText) {\n        onChangeText(text);\n      }\n\n      _this._handleSelectionChange(e);\n    };\n\n    _this._handleFocus = function (e) {\n      var _this$props2 = _this.props,\n          clearTextOnFocus = _this$props2.clearTextOnFocus,\n          onFocus = _this$props2.onFocus,\n          selectTextOnFocus = _this$props2.selectTextOnFocus;\n      var node = _this._node;\n      _TextInputState.default._currentlyFocusedNode = _this._node;\n\n      if (onFocus) {\n        onFocus(e);\n      }\n\n      if (clearTextOnFocus) {\n        _this.clear();\n      }\n\n      if (selectTextOnFocus) {\n        node && node.select();\n      }\n    };\n\n    _this._handleKeyDown = function (e) {\n      e.stopPropagation();\n\n      if (e.key === 'ArrowLeft' || e.key === 'ArrowUp' || e.key === 'ArrowRight' || e.key === 'ArrowDown' || e.key === 'Backspace' || e.key === 'Escape' || e.key === 'Enter' && e.metaKey || e.key === 'Tab') {\n        _this._handleKeyPress(e);\n      }\n    };\n\n    _this._handleKeyPress = function (e) {\n      var _this$props3 = _this.props,\n          blurOnSubmit = _this$props3.blurOnSubmit,\n          multiline = _this$props3.multiline,\n          onKeyPress = _this$props3.onKeyPress,\n          onSubmitEditing = _this$props3.onSubmitEditing;\n      var blurOnSubmitDefault = !multiline;\n      var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;\n\n      if (onKeyPress) {\n        var keyValue = e.key;\n\n        if (keyValue) {\n          e.nativeEvent = {\n            altKey: e.altKey,\n            ctrlKey: e.ctrlKey,\n            key: keyValue,\n            metaKey: e.metaKey,\n            shiftKey: e.shiftKey,\n            target: e.target\n          };\n          onKeyPress(e);\n        }\n      }\n\n      if (!e.isDefaultPrevented() && e.key === 'Enter' && !e.shiftKey) {\n        if ((blurOnSubmit || !multiline) && onSubmitEditing) {\n          e.preventDefault();\n          e.nativeEvent = {\n            target: e.target,\n            text: e.target.value\n          };\n          onSubmitEditing(e);\n        }\n\n        if (shouldBlurOnSubmit) {\n          _this.blur();\n        }\n      }\n    };\n\n    _this._handleSelectionChange = function (e) {\n      var _this$props4 = _this.props,\n          onSelectionChange = _this$props4.onSelectionChange,\n          _this$props4$selectio = _this$props4.selection,\n          selection = _this$props4$selectio === void 0 ? emptyObject : _this$props4$selectio;\n\n      if (onSelectionChange) {\n        try {\n          var node = e.target;\n\n          if (isSelectionStale(node, selection)) {\n            var selectionStart = node.selectionStart,\n                selectionEnd = node.selectionEnd;\n            e.nativeEvent.selection = {\n              start: selectionStart,\n              end: selectionEnd\n            };\n            onSelectionChange(e);\n          }\n        } catch (e) {}\n      }\n    };\n\n    _this._setNode = function (component) {\n      _this._node = (0, _findNodeHandle.default)(component);\n    };\n\n    return _this;\n  }\n\n  var _proto = TextInput.prototype;\n\n  _proto.clear = function clear() {\n    this._node.value = '';\n  };\n\n  _proto.isFocused = function isFocused() {\n    return _TextInputState.default.currentlyFocusedField() === this._node;\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    setSelection(this._node, this.props.selection);\n\n    if (document.activeElement === this._node) {\n      _TextInputState.default._currentlyFocusedNode = this._node;\n    }\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    setSelection(this._node, this.props.selection);\n  };\n\n  _proto.render = function render() {\n    var _this$props5 = this.props,\n        autoComplete = _this$props5.autoComplete,\n        autoCorrect = _this$props5.autoCorrect,\n        editable = _this$props5.editable,\n        keyboardType = _this$props5.keyboardType,\n        multiline = _this$props5.multiline,\n        numberOfLines = _this$props5.numberOfLines,\n        secureTextEntry = _this$props5.secureTextEntry,\n        style = _this$props5.style,\n        blurOnSubmit = _this$props5.blurOnSubmit,\n        clearTextOnFocus = _this$props5.clearTextOnFocus,\n        onChangeText = _this$props5.onChangeText,\n        onLayout = _this$props5.onLayout,\n        onSelectionChange = _this$props5.onSelectionChange,\n        onSubmitEditing = _this$props5.onSubmitEditing,\n        selection = _this$props5.selection,\n        selectTextOnFocus = _this$props5.selectTextOnFocus,\n        spellCheck = _this$props5.spellCheck,\n        accessibilityViewIsModal = _this$props5.accessibilityViewIsModal,\n        allowFontScaling = _this$props5.allowFontScaling,\n        caretHidden = _this$props5.caretHidden,\n        clearButtonMode = _this$props5.clearButtonMode,\n        dataDetectorTypes = _this$props5.dataDetectorTypes,\n        disableFullscreenUI = _this$props5.disableFullscreenUI,\n        enablesReturnKeyAutomatically = _this$props5.enablesReturnKeyAutomatically,\n        hitSlop = _this$props5.hitSlop,\n        inlineImageLeft = _this$props5.inlineImageLeft,\n        inlineImagePadding = _this$props5.inlineImagePadding,\n        inputAccessoryViewID = _this$props5.inputAccessoryViewID,\n        keyboardAppearance = _this$props5.keyboardAppearance,\n        needsOffscreenAlphaCompositing = _this$props5.needsOffscreenAlphaCompositing,\n        onAccessibilityTap = _this$props5.onAccessibilityTap,\n        onContentSizeChange = _this$props5.onContentSizeChange,\n        onEndEditing = _this$props5.onEndEditing,\n        onMagicTap = _this$props5.onMagicTap,\n        onScroll = _this$props5.onScroll,\n        removeClippedSubviews = _this$props5.removeClippedSubviews,\n        renderToHardwareTextureAndroid = _this$props5.renderToHardwareTextureAndroid,\n        returnKeyLabel = _this$props5.returnKeyLabel,\n        returnKeyType = _this$props5.returnKeyType,\n        scrollEnabled = _this$props5.scrollEnabled,\n        selectionColor = _this$props5.selectionColor,\n        selectionState = _this$props5.selectionState,\n        shouldRasterizeIOS = _this$props5.shouldRasterizeIOS,\n        textBreakStrategy = _this$props5.textBreakStrategy,\n        textContentType = _this$props5.textContentType,\n        underlineColorAndroid = _this$props5.underlineColorAndroid,\n        otherProps = _objectWithoutPropertiesLoose(_this$props5, [\"autoComplete\", \"autoCorrect\", \"editable\", \"keyboardType\", \"multiline\", \"numberOfLines\", \"secureTextEntry\", \"style\", \"blurOnSubmit\", \"clearTextOnFocus\", \"onChangeText\", \"onLayout\", \"onSelectionChange\", \"onSubmitEditing\", \"selection\", \"selectTextOnFocus\", \"spellCheck\", \"accessibilityViewIsModal\", \"allowFontScaling\", \"caretHidden\", \"clearButtonMode\", \"dataDetectorTypes\", \"disableFullscreenUI\", \"enablesReturnKeyAutomatically\", \"hitSlop\", \"inlineImageLeft\", \"inlineImagePadding\", \"inputAccessoryViewID\", \"keyboardAppearance\", \"needsOffscreenAlphaCompositing\", \"onAccessibilityTap\", \"onContentSizeChange\", \"onEndEditing\", \"onMagicTap\", \"onScroll\", \"removeClippedSubviews\", \"renderToHardwareTextureAndroid\", \"returnKeyLabel\", \"returnKeyType\", \"scrollEnabled\", \"selectionColor\", \"selectionState\", \"shouldRasterizeIOS\", \"textBreakStrategy\", \"textContentType\", \"underlineColorAndroid\"]);\n\n    var type;\n\n    switch (keyboardType) {\n      case 'email-address':\n        type = 'email';\n        break;\n\n      case 'number-pad':\n      case 'numeric':\n        type = 'number';\n        break;\n\n      case 'phone-pad':\n        type = 'tel';\n        break;\n\n      case 'search':\n      case 'web-search':\n        type = 'search';\n        break;\n\n      case 'url':\n        type = 'url';\n        break;\n\n      default:\n        type = 'text';\n    }\n\n    if (secureTextEntry) {\n      type = 'password';\n    }\n\n    var component = multiline ? 'textarea' : 'input';\n    (0, _extends2.default)(otherProps, {\n      autoComplete: autoComplete === 'off' ? 'noop' : autoComplete,\n      autoCorrect: autoCorrect ? 'on' : 'off',\n      dir: 'auto',\n      onBlur: normalizeEventHandler(this._handleBlur),\n      onChange: normalizeEventHandler(this._handleChange),\n      onFocus: normalizeEventHandler(this._handleFocus),\n      onKeyDown: this._handleKeyDown,\n      onKeyPress: this._handleKeyPress,\n      onSelect: normalizeEventHandler(this._handleSelectionChange),\n      readOnly: !editable,\n      ref: this._setNode,\n      spellCheck: spellCheck != null ? spellCheck : autoCorrect,\n      style: [styles.initial, style]\n    });\n\n    if (multiline) {\n      otherProps.rows = numberOfLines;\n    } else {\n      otherProps.type = type;\n    }\n\n    return (0, _createElement.default)(component, otherProps);\n  };\n\n  return TextInput;\n}(_react.Component);\n\nTextInput.displayName = 'TextInput';\nTextInput.defaultProps = {\n  autoCapitalize: 'sentences',\n  autoComplete: 'on',\n  autoCorrect: true,\n  editable: true,\n  keyboardType: 'default',\n  multiline: false,\n  numberOfLines: 1,\n  secureTextEntry: false,\n  style: emptyObject\n};\nTextInput.State = _TextInputState.default;\nTextInput.propTypes = process.env.NODE_ENV !== \"production\" ? _objectSpread({}, _ViewPropTypes.default, {\n  autoCapitalize: (0, _propTypes.oneOf)(['characters', 'none', 'sentences', 'words']),\n  autoComplete: _propTypes.string,\n  autoCorrect: _propTypes.bool,\n  autoFocus: _propTypes.bool,\n  blurOnSubmit: _propTypes.bool,\n  clearTextOnFocus: _propTypes.bool,\n  defaultValue: _propTypes.string,\n  editable: _propTypes.bool,\n  inputAccessoryViewID: _propTypes.string,\n  keyboardType: (0, _propTypes.oneOf)(['default', 'email-address', 'number-pad', 'numbers-and-punctuation', 'numeric', 'phone-pad', 'search', 'url', 'web-search']),\n  maxLength: _propTypes.number,\n  multiline: _propTypes.bool,\n  numberOfLines: _propTypes.number,\n  onBlur: _propTypes.func,\n  onChange: _propTypes.func,\n  onChangeText: _propTypes.func,\n  onFocus: _propTypes.func,\n  onKeyPress: _propTypes.func,\n  onSelectionChange: _propTypes.func,\n  onSubmitEditing: _propTypes.func,\n  placeholder: _propTypes.string,\n  placeholderTextColor: _ColorPropType.default,\n  secureTextEntry: _propTypes.bool,\n  selectTextOnFocus: _propTypes.bool,\n  selection: (0, _propTypes.shape)({\n    start: _propTypes.number.isRequired,\n    end: _propTypes.number\n  }),\n  spellCheck: _propTypes.bool,\n  style: (0, _StyleSheetPropType.default)(_TextInputStylePropTypes.default),\n  value: _propTypes.string,\n  caretHidden: _propTypes.bool,\n  clearButtonMode: _propTypes.string,\n  dataDetectorTypes: _propTypes.string,\n  disableFullscreenUI: _propTypes.bool,\n  enablesReturnKeyAutomatically: _propTypes.bool,\n  keyboardAppearance: _propTypes.string,\n  inlineImageLeft: _propTypes.string,\n  inlineImagePadding: _propTypes.number,\n  onContentSizeChange: _propTypes.func,\n  onEndEditing: _propTypes.func,\n  onScroll: _propTypes.func,\n  returnKeyLabel: _propTypes.string,\n  returnKeyType: _propTypes.string,\n  selectionColor: _ColorPropType.default,\n  selectionState: _propTypes.any,\n  textBreakStrategy: _propTypes.string,\n  underlineColorAndroid: _ColorPropType.default\n}) : {};\n\nvar styles = _StyleSheet.default.create({\n  initial: {\n    MozAppearance: 'textfield',\n    WebkitAppearance: 'none',\n    backgroundColor: 'transparent',\n    borderColor: 'black',\n    borderRadius: 0,\n    borderStyle: 'solid',\n    borderWidth: 0,\n    boxSizing: 'border-box',\n    fontFamily: 'System',\n    fontSize: 14,\n    padding: 0,\n    resize: 'none'\n  }\n});\n\nvar _default = (0, _applyLayout.default)((0, _applyNativeMethods.default)(TextInput));\n\nvar _default2 = _default;\nexports.default = _default2;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_objectSpread, \"_objectSpread\", \"C:\\\\Users\\\\Adekz\\\\Desktop\\\\app\\\\Pim\\\\ControleFrotaVeiculosWeb\\\\node_modules\\\\react-native-web\\\\dist\\\\exports\\\\TextInput\\\\index.js\");\n  reactHotLoader.register(_defineProperty, \"_defineProperty\", \"C:\\\\Users\\\\Adekz\\\\Desktop\\\\app\\\\Pim\\\\ControleFrotaVeiculosWeb\\\\node_modules\\\\react-native-web\\\\dist\\\\exports\\\\TextInput\\\\index.js\");\n  reactHotLoader.register(_objectWithoutPropertiesLoose, \"_objectWithoutPropertiesLoose\", \"C:\\\\Users\\\\Adekz\\\\Desktop\\\\app\\\\Pim\\\\ControleFrotaVeiculosWeb\\\\node_modules\\\\react-native-web\\\\dist\\\\exports\\\\TextInput\\\\index.js\");\n  reactHotLoader.register(_inheritsLoose, \"_inheritsLoose\", \"C:\\\\Users\\\\Adekz\\\\Desktop\\\\app\\\\Pim\\\\ControleFrotaVeiculosWeb\\\\node_modules\\\\react-native-web\\\\dist\\\\exports\\\\TextInput\\\\index.js\");\n  reactHotLoader.register(isAndroid, \"isAndroid\", \"C:\\\\Users\\\\Adekz\\\\Desktop\\\\app\\\\Pim\\\\ControleFrotaVeiculosWeb\\\\node_modules\\\\react-native-web\\\\dist\\\\exports\\\\TextInput\\\\index.js\");\n  reactHotLoader.register(emptyObject, \"emptyObject\", \"C:\\\\Users\\\\Adekz\\\\Desktop\\\\app\\\\Pim\\\\ControleFrotaVeiculosWeb\\\\node_modules\\\\react-native-web\\\\dist\\\\exports\\\\TextInput\\\\index.js\");\n  reactHotLoader.register(normalizeEventHandler, \"normalizeEventHandler\", \"C:\\\\Users\\\\Adekz\\\\Desktop\\\\app\\\\Pim\\\\ControleFrotaVeiculosWeb\\\\node_modules\\\\react-native-web\\\\dist\\\\exports\\\\TextInput\\\\index.js\");\n  reactHotLoader.register(isSelectionStale, \"isSelectionStale\", \"C:\\\\Users\\\\Adekz\\\\Desktop\\\\app\\\\Pim\\\\ControleFrotaVeiculosWeb\\\\node_modules\\\\react-native-web\\\\dist\\\\exports\\\\TextInput\\\\index.js\");\n  reactHotLoader.register(setSelection, \"setSelection\", \"C:\\\\Users\\\\Adekz\\\\Desktop\\\\app\\\\Pim\\\\ControleFrotaVeiculosWeb\\\\node_modules\\\\react-native-web\\\\dist\\\\exports\\\\TextInput\\\\index.js\");\n  reactHotLoader.register(TextInput, \"TextInput\", \"C:\\\\Users\\\\Adekz\\\\Desktop\\\\app\\\\Pim\\\\ControleFrotaVeiculosWeb\\\\node_modules\\\\react-native-web\\\\dist\\\\exports\\\\TextInput\\\\index.js\");\n  reactHotLoader.register(styles, \"styles\", \"C:\\\\Users\\\\Adekz\\\\Desktop\\\\app\\\\Pim\\\\ControleFrotaVeiculosWeb\\\\node_modules\\\\react-native-web\\\\dist\\\\exports\\\\TextInput\\\\index.js\");\n  reactHotLoader.register(_default, \"default\", \"C:\\\\Users\\\\Adekz\\\\Desktop\\\\app\\\\Pim\\\\ControleFrotaVeiculosWeb\\\\node_modules\\\\react-native-web\\\\dist\\\\exports\\\\TextInput\\\\index.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"script"}