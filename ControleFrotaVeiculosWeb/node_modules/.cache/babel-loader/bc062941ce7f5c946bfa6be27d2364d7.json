{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nvar conversions = require(\"./conversions\");\n\nfunction buildGraph() {\n  var graph = {};\n  var models = Object.keys(conversions);\n\n  for (var len = models.length, i = 0; i < len; i++) {\n    graph[models[i]] = {\n      distance: -1,\n      parent: null\n    };\n  }\n\n  return graph;\n}\n\nfunction deriveBFS(fromModel) {\n  var graph = buildGraph();\n  var queue = [fromModel];\n  graph[fromModel].distance = 0;\n\n  while (queue.length) {\n    var current = queue.pop();\n    var adjacents = Object.keys(conversions[current]);\n\n    for (var len = adjacents.length, i = 0; i < len; i++) {\n      var adjacent = adjacents[i];\n      var node = graph[adjacent];\n\n      if (node.distance === -1) {\n        node.distance = graph[current].distance + 1;\n        node.parent = current;\n        queue.unshift(adjacent);\n      }\n    }\n  }\n\n  return graph;\n}\n\nfunction link(from, to) {\n  return function (args) {\n    return to(from(args));\n  };\n}\n\nfunction wrapConversion(toModel, graph) {\n  var path = [graph[toModel].parent, toModel];\n  var fn = conversions[graph[toModel].parent][toModel];\n  var cur = graph[toModel].parent;\n\n  while (graph[cur].parent) {\n    path.unshift(graph[cur].parent);\n    fn = link(conversions[graph[cur].parent][cur], fn);\n    cur = graph[cur].parent;\n  }\n\n  fn.conversion = path;\n  return fn;\n}\n\nmodule.exports = function (fromModel) {\n  var graph = deriveBFS(fromModel);\n  var conversion = {};\n  var models = Object.keys(graph);\n\n  for (var len = models.length, i = 0; i < len; i++) {\n    var toModel = models[i];\n    var node = graph[toModel];\n\n    if (node.parent === null) {\n      continue;\n    }\n\n    conversion[toModel] = wrapConversion(toModel, graph);\n  }\n\n  return conversion;\n};\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(buildGraph, \"buildGraph\", \"C:\\\\Users\\\\Adekz\\\\Desktop\\\\app\\\\Pim\\\\ControleFrotaVeiculosWeb\\\\node_modules\\\\color-convert\\\\route.js\");\n  reactHotLoader.register(deriveBFS, \"deriveBFS\", \"C:\\\\Users\\\\Adekz\\\\Desktop\\\\app\\\\Pim\\\\ControleFrotaVeiculosWeb\\\\node_modules\\\\color-convert\\\\route.js\");\n  reactHotLoader.register(link, \"link\", \"C:\\\\Users\\\\Adekz\\\\Desktop\\\\app\\\\Pim\\\\ControleFrotaVeiculosWeb\\\\node_modules\\\\color-convert\\\\route.js\");\n  reactHotLoader.register(wrapConversion, \"wrapConversion\", \"C:\\\\Users\\\\Adekz\\\\Desktop\\\\app\\\\Pim\\\\ControleFrotaVeiculosWeb\\\\node_modules\\\\color-convert\\\\route.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"script"}